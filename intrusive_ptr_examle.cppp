#include <iostream>
#include <boost/intrusive_ptr.hpp> 
#include <boost/atomic.hpp>

template<typename T>
void intrusive_ptr_add_ref(T* ptr)
{
    ptr->add_ref();
}

template<typename T>
void intrusive_ptr_release(T* ptr)
{
    if (!ptr->release())
        delete ptr;
}

class test
{
    int ref_cnt_;
    test(const test&);
    test& operator = (const test&);

public:
    test() : ref_cnt_(0) {}
    ~test() { std::cerr << "~test() " << std::endl; }
    int add_ref() { return ++ref_cnt_; }
    int release() { return --ref_cnt_; }
};

int main()
{
    test* p = 0;
    boost::intrusive_ptr<test> ptr;

    {
        p = new test();
        boost::intrusive_ptr<test> ptr2(p);
        ptr = ptr2;
    }

    return 0;
}
